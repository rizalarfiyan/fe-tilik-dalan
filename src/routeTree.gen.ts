/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as AuthImport } from './routes/_auth'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as AuthLoginImport } from './routes/_auth/login'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
	id: '/dashboard',
	path: '/dashboard',
	getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
	id: '/_auth',
	getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
	id: '/',
	path: '/',
	getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const DashboardIndexRoute = DashboardIndexImport.update({
	id: '/',
	path: '/',
	getParentRoute: () => DashboardRoute,
} as any).lazy(() =>
	import('./routes/dashboard/index.lazy').then((d) => d.Route),
)

const AuthLoginRoute = AuthLoginImport.update({
	id: '/login',
	path: '/login',
	getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/_auth/login.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
	interface FileRoutesByPath {
		'/': {
			id: '/'
			path: '/'
			fullPath: '/'
			preLoaderRoute: typeof IndexLazyImport
			parentRoute: typeof rootRoute
		}
		'/_auth': {
			id: '/_auth'
			path: ''
			fullPath: ''
			preLoaderRoute: typeof AuthImport
			parentRoute: typeof rootRoute
		}
		'/dashboard': {
			id: '/dashboard'
			path: '/dashboard'
			fullPath: '/dashboard'
			preLoaderRoute: typeof DashboardImport
			parentRoute: typeof rootRoute
		}
		'/_auth/login': {
			id: '/_auth/login'
			path: '/login'
			fullPath: '/login'
			preLoaderRoute: typeof AuthLoginImport
			parentRoute: typeof AuthImport
		}
		'/dashboard/': {
			id: '/dashboard/'
			path: '/'
			fullPath: '/dashboard/'
			preLoaderRoute: typeof DashboardIndexImport
			parentRoute: typeof DashboardImport
		}
	}
}

// Create and export the route tree

interface AuthRouteChildren {
	AuthLoginRoute: typeof AuthLoginRoute
}

const AuthRouteChildren: AuthRouteChildren = {
	AuthLoginRoute: AuthLoginRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface DashboardRouteChildren {
	DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
	DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
	DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
	'/': typeof IndexLazyRoute
	'': typeof AuthRouteWithChildren
	'/dashboard': typeof DashboardRouteWithChildren
	'/login': typeof AuthLoginRoute
	'/dashboard/': typeof DashboardIndexRoute
}

export interface FileRoutesByTo {
	'/': typeof IndexLazyRoute
	'': typeof AuthRouteWithChildren
	'/login': typeof AuthLoginRoute
	'/dashboard': typeof DashboardIndexRoute
}

export interface FileRoutesById {
	__root__: typeof rootRoute
	'/': typeof IndexLazyRoute
	'/_auth': typeof AuthRouteWithChildren
	'/dashboard': typeof DashboardRouteWithChildren
	'/_auth/login': typeof AuthLoginRoute
	'/dashboard/': typeof DashboardIndexRoute
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath
	fullPaths: '/' | '' | '/dashboard' | '/login' | '/dashboard/'
	fileRoutesByTo: FileRoutesByTo
	to: '/' | '' | '/login' | '/dashboard'
	id:
		| '__root__'
		| '/'
		| '/_auth'
		| '/dashboard'
		| '/_auth/login'
		| '/dashboard/'
	fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
	IndexLazyRoute: typeof IndexLazyRoute
	AuthRoute: typeof AuthRouteWithChildren
	DashboardRoute: typeof DashboardRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
	IndexLazyRoute: IndexLazyRoute,
	AuthRoute: AuthRouteWithChildren,
	DashboardRoute: DashboardRouteWithChildren,
}

export const routeTree = rootRoute
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/dashboard"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/login"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/"
      ]
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
